C51 COMPILER V9.01   PWM                                                                   07/11/2015 18:15:48 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN PWM.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE PWM.C OPTIMIZE(6,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1                                                   
   2          /*---------------------------------------------------------------------*/
   3          /* --- STC MCU Limited ------------------------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966-------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.GXWMCU.com --------------------------------------------*/
   9          /* 如果要在文章中应用此代码,请在文章中注明使用了STC的资料及程序        */
  10          /*---------------------------------------------------------------------*/
  11          
  12          
  13          
  14          
  15          
  16          /*************  功能说明    **************
  17          
  18          输出3路9~16位PWM信号。
  19          
  20          PWM频率 = MAIN_Fosc / PWM_DUTY, 假设 MAIN_Fosc = 24MHZ, PWM_DUTY = 6000, 则输出PWM频率为4000HZ.
  21          
  22          ******************************************/
  23          
  24          /***************************用户宏定义*******************************************************/
  25          #define     MAIN_Fosc       24000000UL  //定义主时钟
  26          
  27          #define     PWM_DUTY        6000        //定义PWM的周期，数值为PCA所选择的时钟脉冲个数。
  28          #define     PWM_HIGH_MIN    80          //限制PWM输出的最小占空比, 避免中断里重装参数时间不够。
  29          #define     PWM_HIGH_MAX    (PWM_DUTY - PWM_HIGH_MIN)       //限制PWM输出的最大占空比。
  30          
  31          /********************************************************************************************/
  32          
  33          #define PCA0            0
  34          #define PCA1            1
  35          #define PCA2            2
  36          #define PCA_Counter     3
  37          #define PCA_P12_P11_P10_P37 (0<<4)
  38          #define PCA_P34_P35_P36_P37 (1<<4)
  39          #define PCA_P24_P25_P26_P27 (2<<4)
  40          #define PCA_Mode_PWM                0x42
  41          #define PCA_Mode_Capture            0
  42          #define PCA_Mode_SoftTimer          0x48
  43          #define PCA_Mode_HighPulseOutput    0x4c
  44          #define PCA_Clock_1T    (4<<1)
  45          #define PCA_Clock_2T    (1<<1)
  46          #define PCA_Clock_4T    (5<<1)
  47          #define PCA_Clock_6T    (6<<1)
  48          #define PCA_Clock_8T    (7<<1)
  49          #define PCA_Clock_12T   (0<<1)
  50          #define PCA_Clock_Timer0_OF (2<<1)
  51          #define PCA_Clock_ECI   (3<<1)
  52          #define PCA_Rise_Active (1<<5)
  53          #define PCA_Fall_Active (1<<4)
  54          #define PCA_PWM_8bit    (0<<6)
  55          #define PCA_PWM_7bit    (1<<6)
C51 COMPILER V9.01   PWM                                                                   07/11/2015 18:15:48 PAGE 2   

  56          #define PCA_PWM_6bit    (2<<6)
  57          
  58          #define     ENABLE      1
  59          #define     DISABLE     0
  60          
  61          
  62          typedef     unsigned char   u8;
  63          typedef     unsigned int    u16;
  64          typedef     unsigned long   u32;
  65          
  66          sfr IP        = 0xB8;
  67          sfr AUXR1 = 0xA2;
  68          sfr CCON = 0xD8;
  69          sfr CMOD = 0xD9;
  70          sfr CCAPM0 = 0xDA;      //PCA模块0的工作模式寄存器。
  71          sfr CCAPM1 = 0xDB;      //PCA模块1的工作模式寄存器。
  72          sfr CCAPM2 = 0xDC;      //PCA模块2的工作模式寄存器。
  73          sfr IE    = 0xA8;
  74          sfr CL     = 0xE9;
  75          sfr CCAP0L = 0xEA;      //PCA模块0的捕捉/比较寄存器低8位。
  76          sfr CCAP1L = 0xEB;      //PCA模块1的捕捉/比较寄存器低8位。
  77          sfr CCAP2L = 0xEC;      //PCA模块2的捕捉/比较寄存器低8位。
  78          
  79          sfr CH     = 0xF9;
  80          sfr CCAP0H = 0xFA;      //PCA模块0的捕捉/比较寄存器高8位。
  81          sfr CCAP1H = 0xFB;      //PCA模块1的捕捉/比较寄存器高8位。
  82          sfr CCAP2H = 0xFC;      //PCA模块2的捕捉/比较寄存器高8位。
  83          
  84          sbit CCF0  = CCON^0;    //PCA 模块0中断标志，由硬件置位，必须由软件清0。
  85          sbit CCF1  = CCON^1;    //PCA 模块1中断标志，由硬件置位，必须由软件清0。
  86          sbit CCF2  = CCON^2;    //PCA 模块2中断标志，由硬件置位，必须由软件清0。
  87          sbit CR    = CCON^6;    //1: 允许PCA计数器计数，0: 禁止计数。
  88          sbit CF    = CCON^7;    //PCA计数器溢出（CH，CL由FFFFH变为0000H）标志。
  89                                  //PCA计数器溢出后由硬件置位，必须由软件清0。
  90          sbit PPCA  = IP^7;      //PCA 中断 优先级设定位
  91          
  92          sfr P2M1 = 0x95;    //P2M1.n,P2M0.n     =00--->Standard,    01--->push-pull
  93          sfr P2M0 = 0x96;    //                  =10--->pure input,  11--->open drain
  94          
  95          sfr P1M1 = 0x91;        //P1M1.n,P1M0.n         =00--->Standard,        01--->push-pull         实际上1T的都一样
  96          sfr P1M0 = 0x92;
  97          
  98          sfr P2    = 0xA0;
  99          sbit EA   = IE^7;       //中断允许总控制位
 100          //================================================================
 101          
 102          sbit    P25 = P2^5;
 103          sbit    P26 = P2^6;
 104          sbit    P27 = P2^7;
 105          
 106          u16     CCAP0_tmp,PWM0_high,PWM0_low;
 107          u16     CCAP1_tmp,PWM1_high,PWM1_low;
 108          u16     CCAP2_tmp,PWM2_high,PWM2_low;
 109          
 110          u16     pwm0,pwm1,pwm2;
 111          
 112          void    PWMn_Update(u8 PCA_id, u16 pwm);
 113          void    PCA_Init(void);
 114          void    delay_ms(u8 ms);
 115          
 116          /******************** 主函数 **************************/
 117          void PWM(void)
C51 COMPILER V9.01   PWM                                                                   07/11/2015 18:15:48 PAGE 3   

 118          {
 119   1          
 120   1          PCA_Init(); //PCA初始化
 121   1          EA = 1;
 122   1          P1M1 &= ~(0xe0);    //P2.7 P2.6 P2.5 设置为推挽输出
 123   1          P1M0 |=  (0xe0);
 124   1          
 125   1          while (1)
 126   1          {
 127   2              //delay_ms(2);
 128   2      
 129   2              if(++pwm0 >= PWM_HIGH_MAX)  pwm0 = PWM_HIGH_MIN;
 130   2              PWMn_Update(PCA0,pwm0);
 131   2      
 132   2              if(++pwm1 >= PWM_HIGH_MAX)  pwm1 = PWM_HIGH_MIN;
 133   2              PWMn_Update(PCA1,pwm1);
 134   2      
 135   2              if(++pwm2 >= PWM_HIGH_MAX)  pwm2 = PWM_HIGH_MIN;
 136   2              PWMn_Update(PCA2,pwm2);
 137   2          }
 138   1      }
 139          
 140          
 141          //========================================================================
 142          // 函数: void  delay_ms(u8 ms)
 143          // 描述: 延时函数。
 144          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 145          // 返回: none.
 146          // 版本: VER1.0
 147          // 日期: 2013-4-1
 148          // 备注: 
 149          //========================================================================
 150          void  delay_ms(u8 ms)
 151          {
 152   1           unsigned int i;
 153   1           do{
 154   2                i = MAIN_Fosc / 13000;
 155   2                while(--i)    ;
 156   2           }while(--ms);
 157   1      }
 158          
 159          
 160          //========================================================================
 161          // 函数: void PWMn_SetHighReg(unsigned int high)
 162          // 描述: 更新占空比数据。
 163          // 参数: high:  占空比数据，即PWM输出高电平的PCA时钟脉冲个数。
 164          // 返回: 无
 165          // 版本: VER1.0
 166          // 日期: 2013-5-15
 167          // 备注: 
 168          //========================================================================
 169          void PWMn_Update(u8 PCA_id, u16 pwm)
 170          {
 171   1          if(pwm > PWM_HIGH_MAX)  pwm = PWM_HIGH_MAX; //如果写入大于最大占空比数据，强制为最大占空比。
 172   1          if(pwm < PWM_HIGH_MIN)  pwm = PWM_HIGH_MIN; //如果写入小于最小占空比数据，强制为最小占空比。
 173   1      
 174   1          if(PCA_id == PCA0)
 175   1          {
 176   2              CR = 0;                     //停止PCA一会， 一般不会影响PWM。
 177   2              PWM0_high = pwm;            //数据在正确范围，则装入占空比寄存器。
 178   2              PWM0_low = PWM_DUTY - pwm;  //计算并保存PWM输出低电平的PCA时钟脉冲个数。
 179   2              CR = 1;                     //启动PCA。
C51 COMPILER V9.01   PWM                                                                   07/11/2015 18:15:48 PAGE 4   

 180   2          }
 181   1          else if(PCA_id == PCA1)
 182   1          {
 183   2              CR = 0;                     //停止PCA。
 184   2              PWM1_high = pwm;            //数据在正确范围，则装入占空比寄存器。
 185   2              PWM1_low = PWM_DUTY - pwm;  //计算并保存PWM输出低电平的PCA时钟脉冲个数。
 186   2              CR = 1;                     //启动PCA。
 187   2          }
 188   1          else if(PCA_id == PCA2)
 189   1          {
 190   2              CR = 0;                     //停止PCA。
 191   2              PWM2_high = pwm;            //数据在正确范围，则装入占空比寄存器。
 192   2              PWM2_low = PWM_DUTY - pwm;  //计算并保存PWM输出低电平的PCA时钟脉冲个数。
 193   2              CR = 1;                     //启动PCA。
 194   2          }
 195   1      }
 196          
 197          //========================================================================
 198          // 函数: void   PCA_Init(void)
 199          // 描述: PCA初始化程序.
 200          // 参数: none
 201          // 返回: none.
 202          // 版本: V1.0, 2013-11-22
 203          //========================================================================
 204          void    PCA_Init(void)
 205          {
 206   1          CR = 0;
 207   1          AUXR1 = (AUXR1 & ~(3<<4)) | PCA_P12_P11_P10_P37;    //切换IO口
 208   1          CCAPM0 = (PCA_Mode_HighPulseOutput | ENABLE);   //16位软件定时、高速脉冲输出、中断模式
 209   1          CCAPM1 = (PCA_Mode_HighPulseOutput | ENABLE);
 210   1          CCAPM2 = (PCA_Mode_HighPulseOutput | ENABLE);
 211   1      
 212   1          CH = 0;
 213   1          CL = 0;
 214   1          CMOD  = (CMOD  & ~(7<<1)) | PCA_Clock_1T;           //选择时钟源
 215   1          PPCA  = 1;  // 高优先级中断
 216   1      
 217   1          pwm0 = (PWM_DUTY / 4 * 1);  //给PWM一个初值
 218   1          pwm1 = (PWM_DUTY / 4 * 2);
 219   1          pwm2 = (PWM_DUTY / 4 * 3);
 220   1      
 221   1          PWMn_Update(PCA0,pwm0);
 222   1          PWMn_Update(PCA1,pwm1);
 223   1          PWMn_Update(PCA2,pwm2);
 224   1      
 225   1          CR    = 1;  // 运行PCA定时器
 226   1      }
 227          //======================================================================
 228          
 229          //========================================================================
 230          // 函数: void   PCA_Handler (void) interrupt 7
 231          // 描述: PCA中断处理程序.
 232          // 参数: None
 233          // 返回: none.
 234          // 版本: V1.0, 2012-11-22
 235          //========================================================================
 236          void    PCA_Handler (void) interrupt 7
 237          {
 238   1          if(CCF0)        //PCA模块0中断
 239   1          {
 240   2              CCF0 = 0;       //清PCA模块0中断标志
 241   2              if(P25) CCAP0_tmp += PWM0_high; //输出为高电平，则给影射寄存器装载高电平时间长度
C51 COMPILER V9.01   PWM                                                                   07/11/2015 18:15:48 PAGE 5   

 242   2              else    CCAP0_tmp += PWM0_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 243   2              CCAP0L = (u8)CCAP0_tmp;         //将影射寄存器写入捕获寄存器，先写CCAP0L
 244   2              CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
 245   2          }
 246   1      
 247   1          if(CCF1)    //PCA模块1中断
 248   1          {
 249   2              CCF1 = 0;       //清PCA模块1中断标志
 250   2              if(P26) CCAP1_tmp += PWM1_high; //输出为高电平，则给影射寄存器装载高电平时间长度
 251   2              else    CCAP1_tmp += PWM1_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 252   2              CCAP1L = (u8)CCAP1_tmp;         //将影射寄存器写入捕获寄存器，先写CCAP0L
 253   2              CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
 254   2          }
 255   1      
 256   1          if(CCF2)    //PCA模块2中断
 257   1          {
 258   2              CCF2 = 0;       //清PCA模块1中断标志
 259   2              if(P27) CCAP2_tmp += PWM2_high; //输出为高电平，则给影射寄存器装载高电平时间长度
 260   2              else    CCAP2_tmp += PWM2_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 261   2              CCAP2L = (u8)CCAP2_tmp;         //将影射寄存器写入捕获寄存器，先写CCAP0L
 262   2              CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 263   2          }
 264   1      }
 265          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    428    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
